#include "LG_Vector4D.h"


namespace LevelGenerator
{
	/************************************************************************************************************************/
	/* Implementación de funciones del vector                               												*/
	/************************************************************************************************************************/
	LG_Vector4D::LG_Vector4D()
	{

	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D::LG_Vector4D(float InX, float InY, float InZ, float InW) : X(InX), Y(InY), Z(InZ), W(InW)
	{

	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D::~LG_Vector4D()
	{

	}

	/************************************************************************************************************************/
	/* Implementación de operadores aritméticos                             												*/
	/************************************************************************************************************************/

	LG_Vector4D LG_Vector4D::operator+(const LG_Vector4D& V) const
	{
		return LG_Vector4D(X + V.X, Y + V.Y, Z + V.Z, W + V.W);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator-(const LG_Vector4D& V) const
	{
		return LG_Vector4D(X - V.X, Y - V.Y, Z - V.Z, W - V.W);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator*(float Scale) const
	{
		return LG_Vector4D(X * Scale, Y * Scale, Z * Scale, W * Scale);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator*(const LG_Vector4D& V) const
	{
		return LG_Vector4D(X * V.X, Y * V.Y, Z * V.Z, W *V.W);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator/(float Scale) const
	{
		const float RScale = 1.f / Scale;
		return LG_Vector4D(X * RScale, Y * RScale, Z * RScale, W * RScale);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator/(const LG_Vector4D& V) const
	{
		return LG_Vector4D(X / V.X, Y / V.Y, Z / V.Z, W / V.W);
	}



	/************************************************************************************************************************/
	/* Implementación de operadores lógicos                                 												*/
	/************************************************************************************************************************/
	bool LG_Vector4D::operator==(const LG_Vector4D& V) const
	{
		return X == V.X && Y == V.Y && Z == V.Z && W == V.W;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool LG_Vector4D::operator!=(const LG_Vector4D& V) const
	{
		return X != V.X || Y != V.Y || Z != V.Z || W != V.W;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool LG_Vector4D::operator<(const LG_Vector4D& Other) const
	{
		return X < Other.X && Y < Other.Y && Z < Other.Z && W < Other.W;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool LG_Vector4D::operator>(const LG_Vector4D& Other) const
	{
		return X > Other.X && Y > Other.Y && Z > Other.Z && W > Other.W;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool LG_Vector4D::operator<=(const LG_Vector4D& Other) const
	{
		return X <= Other.X && Y <= Other.Y && Z <= Other.Z && W <= Other.W;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool LG_Vector4D::operator>=(const LG_Vector4D& Other) const
	{
		return X >= Other.X && Y >= Other.Y && Z >= Other.Z&& W >= Other.W;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool LG_Vector4D::Equals(const LG_Vector4D& V, float Tolerance) const
	{
		return abs(X - V.X) < Tolerance && abs(Y - V.Y) < Tolerance && abs(Z - V.Z) < Tolerance && abs(W - V.W) < Tolerance;
	}

	/************************************************************************************************************************/
	/* Implementación de operadores de asignación compuesta                 												*/
	/************************************************************************************************************************/
	LG_Vector4D LG_Vector4D::operator+=(const LG_Vector4D& V)
	{
		X += V.X; Y += V.Y; Z += V.Z; W += V.W;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator-=(const LG_Vector4D& V)
	{
		X -= V.X; Y -= V.Y; Z -= V.Z; W -= V.W;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator*=(float Scale)
	{
		X *= Scale; Y *= Scale; Z *= Scale; W *= Scale;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator/=(float V)
	{
		const float RV = 1.f / V;
		X *= RV; Y *= RV; Z *= RV; W *= RV;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator*=(const LG_Vector4D& V)
	{
		X *= V.X; Y *= V.Y; Z *= V.Z; W *= V.W;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::operator/=(const LG_Vector4D& V)
	{
		X /= V.X; Y /= V.Y; Z /= V.Z; W /= V.W;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float LG_Vector4D::Magnitud(const LG_Vector4D & V)
	{
		return sqrt(pow(V.X, 2) + pow(V.Y, 2) + pow(V.Z, 2) + pow(V.W, 2));
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	LG_Vector4D LG_Vector4D::Normalize(const LG_Vector4D & V)
	{
		return V / Magnitud(V);
	}

	/************************************************************************/
	/* Producto Punto                                                       */
	/************************************************************************/
	float LG_Vector4D::operator|(const LG_Vector4D& V) const
	{
		return X*V.X + Y*V.Y + Z*V.Z + W*V.W;
	}

	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float LG_Vector4D::operator^(const LG_Vector4D& V) const
	{
		//TODO: Implementar el operador.
		return 0.0f;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float LG_Vector4D::Dot(const LG_Vector4D& B)
	{
		float escalar = this->X * B.X + this->Y * B.Y + this->Z * B.Z + this->W * B.W;
		if (escalar <= DELTA && escalar >= 0 - DELTA)
		{
			escalar = 0;
		}
		return escalar;
	}

	LG_Vector4D LG_Vector4D::Cross(const LG_Vector4D & V, const LG_Vector4D & B)
	{
		return LG_Vector4D((V.Y*B.Z - V.Z * B.Y), (V.Z * B.X - V.X * B.Z), (V.X * B.Y - V.Y * B.X), 0);
	}
}
