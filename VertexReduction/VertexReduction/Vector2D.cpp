#include "Vector2D.h"

namespace LevelGenerator
{
	CVector2D::CVector2D()
	{

	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D::CVector2D(float InX, float InY) : X(InX), Y(InY)
	{

	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D::~CVector2D()
	{

	}

	/************************************************************************************************************************/
	/* Implementación de operadores aritméticos                             												*/
	/************************************************************************************************************************/

	CVector2D CVector2D::operator+(const CVector2D& V) const
	{
		return CVector2D(X + V.X, Y + V.Y);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D CVector2D::operator-(const CVector2D& V) const
	{
		return CVector2D(X - V.X, Y - V.Y);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D CVector2D::operator*(float Scale) const
	{
		return CVector2D(X * Scale, Y * Scale);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D CVector2D::operator*(const CVector2D& V) const
	{
		return CVector2D(X * V.X, Y * V.Y);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D CVector2D::operator/(float Scale) const
	{
		const float RScale = 1.f / Scale;
		return CVector2D(X * RScale, Y * RScale);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D CVector2D::operator/(const CVector2D& V) const
	{
		return CVector2D(X / V.X, Y / V.Y);
	}



	/************************************************************************************************************************/
	/* Implementación de operadores lógicos                                 												*/
	/************************************************************************************************************************/
	bool CVector2D::operator==(const CVector2D& V) const
	{
		return X == V.X && Y == V.Y;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector2D::operator!=(const CVector2D& V) const
	{
		return X != V.X || Y != V.Y;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector2D::operator<(const CVector2D& Other) const
	{
		return X < Other.X && Y < Other.Y;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector2D::operator>(const CVector2D& Other) const
	{
		return X > Other.X && Y > Other.Y;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector2D::operator<=(const CVector2D& Other) const
	{
		return X <= Other.X && Y <= Other.Y;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector2D::operator>=(const CVector2D& Other) const
	{
		return X >= Other.X && Y >= Other.Y;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector2D::Equals(const CVector2D& V, float Tolerance) const
	{
		return abs(X - V.X) < Tolerance && abs(Y - V.Y) < Tolerance;
	}

	/************************************************************************************************************************/
	/* Implementación de operadores de asignación compuesta                 												*/
	/************************************************************************************************************************/
	CVector2D& CVector2D::operator+=(const CVector2D& V)
	{
		X += V.X; Y += V.Y;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D& CVector2D::operator-=(const CVector2D& V)
	{
		X -= V.X; Y -= V.Y;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D& CVector2D::operator*=(float Scale)
	{
		X *= Scale; Y *= Scale;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D& CVector2D::operator/=(float V)
	{
		const float RV = 1.f / V;
		X *= RV; Y *= RV;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D& CVector2D::operator*=(const CVector2D& V)
	{
		X *= V.X; Y *= V.Y;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D& CVector2D::operator/=(const CVector2D& V)
	{
		X /= V.X; Y /= V.Y;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector2D::Magnitud(const CVector2D & V)
	{
		return sqrt(pow(V.X, 2) + pow(V.Y, 2));
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector2D CVector2D::Normalize(const CVector2D & V)
	{
		return V / Magnitud(V);
	}

	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector2D::operator|(const CVector2D& V) const
	{
		return X*V.X + Y*V.Y;
	}

	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector2D::operator^(const CVector2D& V) const
	{
		return X*V.Y - Y*V.X;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector2D::DotProduct(const CVector2D& A, const CVector2D& B)
	{
		return A | B;
	}

}