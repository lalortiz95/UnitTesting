#include "Vector2DI.h"


/************************************************************************************************************************/
/* Implementación de funciones del vector                               												*/
/************************************************************************************************************************/
CVector2DI::CVector2DI()
{

}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI::CVector2DI(int iX, int iY) : X(iX), Y(iY)
{

}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI::~CVector2DI()
{

}

/************************************************************************************************************************/
/* Implementación de operadores aritméticos                             												*/
/************************************************************************************************************************/

CVector2DI CVector2DI::operator+(const CVector2DI& V) const
{
	return CVector2DI(X + V.X, Y + V.Y);
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator-(const CVector2DI& V) const
{
	return CVector2DI(X - V.X, Y - V.Y);
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator*(int Scale) const
{
	return CVector2DI(X * Scale, Y * Scale);
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator*(const CVector2DI& V) const
{
	return CVector2DI(X * V.X, Y * V.Y);
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator/(int Scale) const
{
	return CVector2DI(X * Scale, Y * Scale);
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator/(const CVector2DI& V) const
{
	return CVector2DI(X / V.X, Y / V.Y);
}



/************************************************************************************************************************/
/* Implementación de operadores lógicos                                 												*/
/************************************************************************************************************************/
bool CVector2DI::operator==(const CVector2DI& V) const
{
	return X == V.X && Y == V.Y;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
bool CVector2DI::operator!=(const CVector2DI& V) const
{
	return X != V.X || Y != V.Y;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
bool CVector2DI::operator<(const CVector2DI& Other) const
{
	return X < Other.X && Y < Other.Y;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
bool CVector2DI::operator>(const CVector2DI& Other) const
{
	return X > Other.X && Y > Other.Y;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
bool CVector2DI::operator<=(const CVector2DI& Other) const
{
	return X <= Other.X && Y <= Other.Y;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
bool CVector2DI::operator>=(const CVector2DI& Other) const
{
	return X >= Other.X && Y >= Other.Y;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
bool CVector2DI::Equals(const CVector2DI& V, int Tolerance) const
{
	return abs(X - V.X) < Tolerance && abs(Y - V.Y) < Tolerance;
}

/************************************************************************************************************************/
/* Implementación de operadores de asignación compuesta                 												*/
/************************************************************************************************************************/
CVector2DI CVector2DI::operator+=(const CVector2DI& V)
{
	X += V.X; Y += V.Y;
	return *this;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator-=(const CVector2DI& V)
{
	X -= V.X; Y -= V.Y;
	return *this;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator*=(int Scale)
{
	X *= Scale; Y *= Scale;
	return *this;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator/=(int V)
{
	X *= V; Y *= V;
	return *this;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator*=(const CVector2DI& V)
{
	X *= V.X; Y *= V.Y;
	return *this;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::operator/=(const CVector2DI& V)
{
	X /= V.X; Y /= V.Y;
	return *this;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
float CVector2DI::Magnitud(const CVector2DI& V)
{
	return (float)sqrt((float)pow((float)V.X, 2) + pow((float)V.Y, 2));
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
CVector2DI CVector2DI::Normalize(const CVector2DI& V)
{
	return V / Magnitud(V);
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
int CVector2DI::operator|(const CVector2DI& V) const
{
	return X*V.X + Y*V.Y;
}

/************************************************************************/
/*                                                                      */
/************************************************************************/
int CVector2DI::operator^(const CVector2DI& V) const
{
	return X*V.Y - Y*V.X;
}
/************************************************************************/
/*                                                                      */
/************************************************************************/
int CVector2DI::DotProduct(const CVector2DI& A, const CVector2DI& B)
{
	return A | B;
}
