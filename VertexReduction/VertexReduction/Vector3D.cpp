#include "Vector3D.h"

namespace LevelGenerator
{
	/************************************************************************************************************************/
	/* Implementación de funciones del vector                               												*/
	/************************************************************************************************************************/
	CVector3D::CVector3D()
	{

	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D::CVector3D(float InX, float InY, float InZ) : X(InX), Y(InY), Z(InZ)
	{

	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D::~CVector3D()
	{

	}

	/************************************************************************************************************************/
	/* Implementación de operadores aritméticos                             												*/
	/************************************************************************************************************************/

	CVector3D CVector3D::operator+(const CVector3D& V) const
	{
		return CVector3D(X + V.X, Y + V.Y, Z + V.Z);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator-(const CVector3D& V) const
	{
		return CVector3D(X - V.X, Y - V.Y, Z - V.Z);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator*(float Scale) const
	{
		return CVector3D(X * Scale, Y * Scale, Z * Scale);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator*(const CVector3D& V) const
	{
		return CVector3D(X * V.X, Y * V.Y, Z * V.Z);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator/(float Scale) const
	{
		const float RScale = 1.f / Scale;
		return CVector3D(X * RScale, Y * RScale, Z * RScale);
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator/(const CVector3D& V) const
	{
		return CVector3D(X / V.X, Y / V.Y, Z / V.Z);
	}



	/************************************************************************************************************************/
	/* Implementación de operadores lógicos                                 												*/
	/************************************************************************************************************************/
	bool CVector3D::operator==(const CVector3D& V) const
	{
		return X == V.X && Y == V.Y && Z == V.Z;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector3D::operator!=(const CVector3D& V) const
	{
		return X != V.X || Y != V.Y || Z != V.Z;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector3D::operator<(const CVector3D& Other) const
	{
		return X < Other.X && Y < Other.Y && Z < Other.Z;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector3D::operator>(const CVector3D& Other) const
	{
		return X > Other.X && Y > Other.Y && Z > Other.Z;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector3D::operator<=(const CVector3D& Other) const
	{
		return X <= Other.X && Y <= Other.Y && Z <= Other.Z;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector3D::operator>=(const CVector3D& Other) const
	{
		return X >= Other.X && Y >= Other.Y && Z >= Other.Z;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	bool CVector3D::Equals(const CVector3D& V, float Tolerance) const
	{
		return abs(X - V.X) < Tolerance &&abs(Y - V.Y) < Tolerance && abs(Z - V.Z) < Tolerance;
	}

	/************************************************************************************************************************/
	/* Implementación de operadores de asignación compuesta                 												*/
	/************************************************************************************************************************/
	CVector3D CVector3D::operator+=(const CVector3D& V)
	{
		X += V.X; Y += V.Y; Z += V.Z;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator-=(const CVector3D& V)
	{
		X -= V.X; Y -= V.Y; Z -= V.Z;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator*=(float Scale)
	{
		X *= Scale; Y *= Scale; Z *= Scale;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator/=(float V)
	{
		const float RV = 1.f / V;
		X *= RV; Y *= RV; Z *= RV;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator*=(const CVector3D& V)
	{
		X *= V.X; Y *= V.Y; Z *= V.Z;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::operator/=(const CVector3D& V)
	{
		X /= V.X; Y /= V.Y; Z /= V.Z;
		return *this;
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector3D::Magnitud(const CVector3D & V)
	{
		return sqrt(pow(V.X, 2) + pow(V.Y, 2) + pow(V.Z, 2));
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	CVector3D CVector3D::Normalize(const CVector3D & V)
	{
		return V / Magnitud(V);
	}

	/************************************************************************/
	/* Producto Punto                                                       */
	/************************************************************************/
	float CVector3D::operator|(const CVector3D& V) const
	{
		return X*V.X + Y*V.Y + Z*V.Z;
	}

	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector3D::operator^(const CVector3D& V) const
	{
		return ((Y*V.Z - Z*V.Y) - (X * V.Z - Z*V.X) + (X * V.Y - Y * V.X));
	}
	/************************************************************************/
	/*                                                                      */
	/************************************************************************/
	float CVector3D::DotProduct(const CVector3D& A, const CVector3D& B)
	{
		return A | B;
	}

	CVector3D CVector3D::Cross3(const CVector3D & V, const CVector3D & B)
	{
		return CVector3D((V.Y*B.Z - V.Z*B.Y), (-1 * (V.X * B.Z - V.Z*B.X)), (V.X * B.Y - V.Y * B.X));
	}
}